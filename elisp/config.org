#+TITLE: Publishing via Org Mode

* Overview
* Dependencies
** Setting up Repositories
- Add ~org~, ~melpa~ and ~elpa~ archives.
- Sets the package archives directory so that packages aren't installed in
  ~~/.emacs.d/elpa~.

#+begin_src emacs-lisp +n :results silent
(require 'package)

(setq package-user-dir (expand-file-name ".packages" venikx.com-root))

(package-initialize)
(unless package-archive-contents
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)
  (package-refresh-contents))
#+end_src

** Packages
#+begin_src emacs-lisp +n :results silent
(dolist (pkg '(esxml htmlize webfeeder))
  (unless (package-installed-p pkg)
    (package-install pkg)))
#+end_src

*** esxml
The [[https://github.com/tali713/esxml][esxml]] package provides elisp function to declarativly generate HTML markup. The ~concat~ and ~format~ are ugly compared to declarative nature of esxml.

#+begin_src emacs-lisp +n :results silent
(require 'esxml)
#+end_src

*** htmlimze
Generate a css theme for the code-blocks based on your own emacs theme.

#+begin_src emacs-lisp +n :results silent
(require 'htmlize)
#+end_src

*** ox-publish
The built-in org-mode publishing system (aka how you build your project).

#+begin_src emacs-lisp +n :results silent
(require 'ox-publish)
(require 'ox-html)
#+end_src

* Variables
** Common
The ~venikx.com-root~ variable has been declared inside the ~venikx.com.el~
function, because the root was needed to load the current org-mode file to parse
it through babel.

#+begin_src emacs-lisp +n :results silent
(defvar venikx.com-pages (expand-file-name "pages" venikx.com-root)
  "Directory where the pages of the website are found.")

(defvar venikx.com-site-attachments
  (regexp-opt '("jpg" "jpeg" "gif" "png" "svg"
                "ico" "cur" "css" "js"
                "eot" "woff" "woff2" "ttf"
                "html" "pdf")))
#+end_src

** Site Defaults
#+begin_src emacs-lisp +n :results silent
(defvar venikx.com-default-site-image "assets/me.jpg"
  "The image used when no meta-image is given.")

(setq
 user-full-name "Kevin Rangel"
 user-mail-address "code@venikx.com")
#+end_src

*** Socials
#+begin_src emacs-lisp +n :results silent
(defvar venikx.com-personal-email "code@venikx.com"
  "My contact email for coding related topics.")

(defvar venikx.com-business-email "hello@babo.digital"
  "My contact email for business inquiries.")

#+end_src

** Org Variables
#+begin_src emacs-lisp +n :results silent
(setq org-publish-use-timestamps-flag nil
      org-export-with-section-numbers nil
      org-confirm-babel-evaluate nil
      org-export-use-babel t
      org-export-with-smart-quotes t
      org-export-with-sub-superscripts nil
      org-export-with-tags 'not-in-toc
      org-export-headline-levels 7
      org-export-with-toc t
      org-id-track-globally t)
#+end_src

** Others

#+begin_src emacs-lisp +n :results silent
(setq make-backup-files nil)
#+end_src

* Publishing
** Things to remember
*** TODO Add RSS feed file + link in header
It's possibly only needed on the posts page.
*** TODO Add icon to head
*** TODO Handle og:type and twitter equivalent for articles and other pages
*** TODO Use ~venikx.com-html-export-block~ to embed iframe for react, vue, etc snippets and webpages
*** TODO Start the heading elements from h2 for articles
*** TODO Only add toc when there's a lot of content
** HTML Template
#+begin_src emacs-lisp +n :results silent
(defun venikx.com-full-url (info)
  (concat (plist-get info :site-url) "/"
          (file-name-sans-extension (file-relative-name
                                     (plist-get info :this-file)
                                     (plist-get info :base-directory)))
          ".html"))

(defun venikx.com-org-element-link-parser (link)
  (with-temp-buffer
    (insert link)
    (delay-mode-hooks (org-mode))
    (goto-char (point-min))
    (org-element-link-parser)))

(defun venikx.com-head-image (info)
  (concat (plist-get info :site-url) "/"
          (if (not (venikx.com-org-element-link-parser (plist-get info :image)))
              (plist-get info :image)
            (concat
             (file-relative-name
              (file-name-directory (plist-get info :this-file))
              (plist-get info :base-directory))
             (plist-get
              (car (cdr
                    (venikx.com-org-element-link-parser (plist-get info :image)))) :path)))))

(defun venikx.com-site-header (info)
  (sxml-to-xml
   `(header
     (div (@ (class "header-left"))
          (a (@ (href "/")) "Kevin Rangel")
          (nav (ul
           (li (a (@ (href "/about/index.html")) "About"))
           ;(li (a (@ (href "/projects/index.html")) "Projects"))
           (li (a (@ (href "/posts/index.html")) "Posts")))))
     (div (@ (class "header-right"))
          ;(button (@ (aria-label "Toggle Mode")))
          ;(a (@ (href "/rss.xml")) "RSS")
          ))))

(defun venikx.com-site-footer (info)
  (sxml-to-xml
   `(footer
     (div (@ (class "footer-left"))
          (div (a (@ (href "/")) "Kevin Rangel"))
          (span "&copy; 2021 Kevin 'Rangel' De Baerdemaeaker, licensed under "
                (a (@ (href "https://creativecommons.org/licenses/by-nc/4.0/"     )
                      (rel "noreferrer noopener")
                      (target "_blank"))
                   (strong "Creative Commons BY-NC 4.0"))
                "."))
     (div (@ (class "footer-right"))
          (p "Links")
          (ul
           (li (a (@ (href ,(concat "https://twitter.com/"
                                    (plist-get info :socials-twitter)))) "Twitter"))
           (li (a (@ (href ,(concat "https://github.com/"
                                    (plist-get info :socials-github)))) "GitHub"))
           (li (a (@ (href ,(concat "mailto:" (plist-get info :email)))) "Contact"))
           ;(li (a (@ (href "/rss.xml")) "R"))
           )))))

(defun venikx.com-html-template (contents info)
  (concat
   (org-html-doctype info)
   (sxml-to-xml
    `(html (@ (lang "en"))
           (head
            (meta (@ (charset "utf-8")))
            (meta (@ (name "viewport")
                     (content "width=device-width, initial-scale=1")))

            (title ,(substring-no-properties (car (plist-get info :title))))
            (meta (@ (name "description")
                     (content ,(plist-get info :description))))
            (link (@ (rel "canonical")
                     (href ,(venikx.com-full-url info))))

            (meta (@ (name "og:title")
                     (content ,(substring-no-properties (car (plist-get info :title))))))
            (meta (@ (name "og:description")
                     (content ,(plist-get info :description))))
            ;;            (meta (@ (name "og:type")
            ;;                     (content ,(plist-get info :title))))
            (meta (@ (name "og:image")
                     (content ,(venikx.com-head-image info))))
            (meta (@ (name "og:image:alt")
                     (content ,(plist-get info :image-alt))))
            (meta (@ (name "og:url")
                     (href ,(venikx.com-full-url info))))

            (meta (@ (name "twitter:card")
                     (content "summary_large_image")))
            (meta (@ (name "twitter:site")
                     (content ,(concat "@" (plist-get info :socials-twitter)))))
            (meta (@ (name "twitter:creator")
                     (content ,(concat "@" (plist-get info :socials-twitter)))))
            (meta (@ (name "twitter:title")
                     (content ,(substring-no-properties (car (plist-get info :title))))))
            (meta (@ (name "twitter:description")
                     (content ,(plist-get info :description))))
            (meta (@ (name "twitter:image")
                     (content ,(venikx.com-head-image info))))
            (meta (@ (name "twitter:image:alt")
                     (content ,(plist-get info :image-alt))))

            (meta (@ (name "author")
                     (content ,(substring-no-properties (car (plist-get info :author))))))
            (meta (@ (name "generator")
                     (content ,(format "Emacs %s (Org mode %s)"
                                       emacs-version
                                       (if (fboundp 'org-version) (org-version) "unknown version"))))))
           (body (div ,(venikx.com-site-header info)
                      (main (h1 ,(substring-no-properties (car (plist-get info :title))))
                            ,contents)
                      ,(venikx.com-site-footer info)))))))
#+end_src

** Custom HTML functions
#+begin_src emacs-lisp +n :results silent
(defun venikx.com-html-quote-block (quote-block contents _info)
  (let ((caption (car (car (org-element-property :caption quote-block))))
        (caption-url (car (car (org-element-property :caption-url quote-block)))))

    (if caption (sxml-to-xml `(figure (blockquote ,contents) (figcaption ,(car caption))))
      (sxml-to-xml `(blockquote ,contents)))))

(defun venikx.com-html-export-block (export-block contents _info)
  (let ((contents (org-element-property :value export-block))
        (language (org-element-property :type export-block)))
    (when contents
      (cond ((string= "JAVASCRIPT" language)
             (format "<script>%s</script>" contents))
            ((string= "CSS" language)
             (format "<style type=\"text/css\">%s</style>" contents))
            (t
             (org-remove-indentation contents))))))

(require 'subr-x)
(defun venikx.com-html-anchor-from-headline (headline-text)
  (thread-last headline-text
    (downcase)
    (replace-regexp-in-string " " "-")
    (replace-regexp-in-string "</?code>" "")
    (replace-regexp-in-string "[^[:alnum:]_-]" "")))
(defun venikx.com-html-headline (headline contents info)
  (let* ((text (org-export-data (org-element-property :title headline) info))
         (level (org-export-get-relative-level headline info))
         (anchor (venikx.com-html-anchor-from-headline text))
         (attributes (org-element-property :ATTR_HTML headline))
         (container (org-element-property :HTML_CONTAINER headline))
         (container-class (and container (org-element-property :HTML_CONTAINER_CLASS headline))))
    (when attributes
      (setq attributes
            (format " %s" (org-html--make-attribute-string
                           (org-export-read-attribute 'attr_html `(nil
                                                                   (attr_html ,(split-string attributes))))))))
    (concat
     (when (and container (not (string= "" container)))
       (format "<%s%s>" container (if container-class (format " class=\"%s\"" container-class) "")))
     (if (not (org-export-low-level-p headline info))
         (format "<h%d%s id=\"%s\"><a href=\"#%s\">%s</a></h%d>%s" level (or attributes "") anchor anchor text level (or contents ""))
       (concat
        (when (org-export-first-sibling-p headline info) "<ul>")
        (format "<li>%s%s</li>" text (or contents ""))
        (when (org-export-last-sibling-p headline info) "</ul>")))
     (when (and container (not (string= "" container)))
       (format "</%s>" (cl-subseq container 0 (cl-search " " container)))))))

(defun venikx.com-html-horizontal-rule (_horizontal-rule _contents _info) "<hr /")

(defun venikx.com-html-inner-template (contents info)
  (concat
   ;; Table of contents.
   (let ((depth (plist-get info :with-toc)))
     (when depth (org-html-toc depth info)))
   ;; Document contents.
   contents
   ;; Footnotes section.
   (org-html-footnote-section info)))

(defun venikx.com-html-content (_whatever contents _info) contents)

(defun venikx.com-html-not-implemented (whatever contents info)
  (message "NOT IMPLEMENTED")
  (format "<div style=\"background-color: red;\">
             <p>NOT IMPLEMENTED!!</p>
             <p>TYPE %S</p>
             <p>KEY %S</p>
             <p>VALUE %S</p>
          </div>"
          (org-element-type whatever)
          (org-element-property :key whatever)
          (org-element-property :value whatever)))

(defun venikx.com-html-section (section contents info) contents)

(defun venikx.com-html--attr (element &optional property)
  (let ((attributes (org-export-read-attribute :attr_html element property)))
    (if attributes (concat " " (org-html--make-attribute-string attributes)) "")))

(defun venikx.com-html-plain-list (plain-list contents info)
  (when contents
    (let ((type (cl-case (org-element-property :type plain-list)
                  (ordered "ol")
                  (unordered "ul")
                  (descriptive "dl"))))
      (format "<%s%s>%s</%s>" type (venikx.com-html--attr plain-list) contents type))))

;; TODO Use figcaption when adding labels
(defun venikx.com-html-src-block (src-block contents info)
  (let ((code (org-html-format-code src-block info))
        (language (org-element-property :language src-block)))
    (when code
      (format "<pre><code class=\"language-%s\"%s>%s</code></pre>"
              language (venikx.com-html--attr src-block) code))))

(defun venikx.com-html-special-block (special-block contents info)
  "Transcode SPECIAL-BLOCK from Org to HTML.
CONTENTS is the text within the #+BEGIN_ and #+END_ markers.
INFO is a plist holding contextual information."
  (when contents
    (let ((block-type (downcase (org-element-property :type special-block))))
      (format "<%s%s>%s</%s>" block-type (venikx.com-html--attr special-block) contents block-type))))

(defun my/format-path-for-anchor-tag (path)
  (concat (downcase
           (file-name-sans-extension
            path))
          ".html"))

(defun venikx.com-html-link (link contents info)
  (if (string= 'fuzzy (org-element-property :type link))
      (let ((path (gethash (s-replace "id:" "" (org-element-property :path link)) my/org-id-locations)))
        (print path)
        (if path
            (org-element-put-property link :path
                                      (my/format-path-for-anchor-tag
                                       (car (last (s-split "/" path))))))))
  (when (and (string= 'file (org-element-property :type link))
            (string= "org" (file-name-extension (org-element-property :path link))))
    (org-element-put-property link :path
                              (my/format-path-for-anchor-tag
                                        (org-element-property :path link))))

  (if (and (string= 'file (org-element-property :type link))
          (file-name-extension (org-element-property :path link))
          (string-match "png\\|jpg\\|svg"
                        (file-name-extension
                          (org-element-property :path link)))
          (equal contents nil))
      (format "<img src=/%s >" (org-element-property :path link))
    (if (and (equal contents nil)
            (or (not (file-name-extension (org-element-property :path link)))
                (and (file-name-extension (org-element-property :path link))
                      (not (string-match "png\\|jpg\\|svg"
                                        (file-name-extension
                                          (org-element-property :path link)))))))
        (format "<a href=\"%s\">%s</a>"
                (org-element-property :raw-link link)
                (org-element-property :raw-link link))
      (format "<a href=\"%s\">%s</a>"
              (org-element-property :path link)
              contents))))
#+end_src

** The custom backend
#+begin_src emacs-lisp +n :results silent
(org-export-define-derived-backend
    'venikx-html 'html
  :translate-alist
  '(
    (headline . venikx.com-html-headline)
    (link . venikx.com-html-link)
    (quote-block . venikx.com-html-quote-block)
    (template . venikx.com-html-template)
    )
  :options-alist
  '(
    (:site-url nil nil "https://venikx.com" t)
    (:socials-twitter "SOCIALS_TWITTER" nil "_venikx" t)
    (:image "IMAGE" nil venikx.com-default-site-image t)
    (:image-alt "IMAGE_ALT" nil "Test" t)
    (:business-email nil nil venikx.com-business-email)
    ))
#+end_src

*** Modifying ox-html variables
**** Use modern defaults in ox-html
#+begin_src emacs-lisp +n :results silent
(setq org-html-doctype "html5"
      org-html-html5-fancy t
      org-html-checkbox-type 'html
      org-html-head-include-default-style t
      org-html-head-include-scripts t
      org-html-container-element "section")
#+end_src
**** Use semantic HTML for text markup
#+begin_src emacs-lisp +n :results silent
(setq org-html-text-markup-alist
  '((bold . "<strong>%s</strong>")
    (code . "<code>%s</code>")
    (italic . "<em>%s</em>")
    (strike-through . "<del>%s</del>")
    (underline . "<span class=\"underline\">%s</span>")
    (verbatim . "<code>%s</code>")))
#+end_src

**** TODO check what these do
#+begin_src emacs-lisp +n :results silent
(setq
      org-html-htmlize-output-type 'css
      org-html-self-link-headlines t
      org-html-inline-images t
      )
#+end_src

*** Function to load the custom backend
#+begin_src emacs-lisp +n :results silent
(defun org-venikx-html-publish-to-html (plist filename pub-dir)
  "Publish an org file to HTML.
FILENAME is the filename of the Org file to be published. PLIST is the property
list for the given project. PUB-DIR is the publishing directory. Return output
file name."
  (org-publish-org-to 'venikx-html filename
                      (concat "." (or (plist-get plist :html-extension)
                                      org-html-extension
                                      "html"))
                      (plist-put plist :this-file filename)
                      pub-dir))
#+end_src

** The project alist
#+begin_src emacs-lisp +n :results silent
(setq org-publish-project-alist
      (list
       (list "content"
             :base-extension "org"
             :recursive t
             :base-directory venikx.com-pages
             :publishing-function 'org-venikx-html-publish-to-html
             :publishing-directory (expand-file-name "public" venikx.com-root)
             :with-title t
             :with-toc nil)
       (list "global-assets"
             :base-directory (expand-file-name "assets" venikx.com-root)
             :base-extension venikx.com-site-attachments
             :publishing-directory (expand-file-name "public/assets" venikx.com-root)
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "assets-from-pages"
             :base-directory venikx.com-pages
             :base-extension venikx.com-site-attachments
             :publishing-directory (expand-file-name "public" venikx.com-root)
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "site" :components '("content" "global-assets" "assets-from-pages"))))

(defun venikx.com-publish ()
  "Calling the script builds the venikx.com website."
  (interactive)
  (org-publish-all t))
#+end_src
