#+TITLE: test.org

* Dependencies
** Setting up Repositories
- Add ~org~, ~melpa~ and ~elpa~ archives.
- Sets the package archives directory so that packages aren't installed in
  ~~/.emacs.d/elpa~.

#+begin_src emacs-lisp +n :results silent
(require 'package)

(setq package-user-dir (expand-file-name ".packages" venikx.com--root))

(package-initialize)
(unless package-archive-contents
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t)
  (package-refresh-contents))
#+end_src

** Packages
#+begin_src emacs-lisp +n :results silent
(dolist (pkg '(esxml htmlize webfeeder))
  (unless (package-installed-p pkg)
    (package-install pkg)))

(require 'esxml)
(require 'htmlize)
(require 'webfeeder)
(require 'ox-publish)
#+end_src

*** esxml
The [[https://github.com/tali713/esxml][esxml]] package provides elisp function to declarativly generate HTML markup. The ~concat~ and ~format~ are ugly compared to declarative nature of esxml.

#+begin_src emacs-lisp +n :results silent
(require 'esxml)
#+end_src

*** htmlimze
Generate a css theme for the code-blocks based on your own emacs theme.

#+begin_src emacs-lisp +n :results silent
(require 'htmlize)
#+end_src

*** webfeeder
The webfeeder is used to generate RSS and Atom feeds.

#+begin_src emacs-lisp +n :results silent
(require 'webfeeder)
#+end_src

*** ox-publish
The built-in org-mode publishing system (aka how you build your project).

#+begin_src emacs-lisp +n :results silent
(require 'ox-publish)
#+end_src

* Variables
** Common Variables
The ~venikx.com--root~ variable has been declared inside the ~venikx.com.el~
function, because the root was needed to load the current org-mode file to parse
it through babel.

#+begin_src emacs-lisp +n :results silent
(defvar venikx.com--pages (expand-file-name "pages" venikx.com--root)
  "Directory where the pages of the website are found.")

(defvar venikx.com--site-attachments
  (regexp-opt '("jpg" "jpeg" "gif" "png" "svg"
                "ico" "cur" "css" "js"
                "eot" "woff" "woff2" "ttf"
                "html" "pdf")))
#+end_src

** Site Variables

#+begin_src emacs-lisp +n :results silent
(defvar venikx/url "https://venikx.com"
  "The URL where this site will be published.")

(defvar venikx.com--name "Kevin Rangel"
  "My name.")

(setq
 user-full-name "Kevin Rangel"
 user-mail-address "code@venikx.com")
#+end_src

*** Socials
#+begin_src emacs-lisp +n :results silent
(defvar venikx.com--personal-email "code@venikx.com"
  "My contact email for coding related topics.")

(defvar venikx.com--business-email "hello@babo.digital"
  "My contact email for business inquiries.")

(defvar venikx/twitter "@_venikx"
  "My Twitter handle for reference in the twitter meta tags.")

#+end_src

** Org Variables
#+begin_src emacs-lisp +n :results silent
(setq org-publish-use-timestamps-flag t
      org-publish-timestamp-directory "./.org-cache/"
      org-export-with-section-numbers nil
      org-export-use-babel nil
      org-export-with-smart-quotes t
      org-export-with-sub-superscripts nil
      org-export-with-tags 'not-in-toc
      org-export-with-toc t
      org-id-locations-file "./.org-id-locations"
      org-id-track-globally t)
#+end_src

** HTML Exporter
#+begin_src emacs-lisp +n :results silent
(setq org-html-metadata-timestamp-format "%Y-%m-%d"
      org-html-checkbox-type 'venikx-html
      org-html-html5-fancy nil
      org-html-htmlize-output-type 'css
      org-html-self-link-headlines t
      org-html-validation-link nil
      org-html-inline-images t
      ;org-html-doctype "html5"
      )
#+end_src

** Others

#+begin_src emacs-lisp +n :results silent
(setq make-backup-files nil)
#+end_src

* Publishing
** Things to remember
*** TODO Add RSS feed file + link in header
It's possibly only needed on the posts page.
*** TODO Add icons to header
** HTML Template
#+begin_src emacs-lisp +n :results silent
(defun  venikx.com--org-html-template (contents info)
  (concat
   "<!DOCTYPE html>"

   (sxml-to-xml
    `(html (@ (lang "en"))
           (head
            (meta (@ (charset "utf-8")))
            (meta (@ (name "viewport")
                     (content "width=device-width, initial-scale=1")))

            (title ,(plist-get info :title))
            (meta (@ (name "description")
                     (content ,(plist-get info :description))))
            (link (@ (rel "canonical")
                     (href ,(plist-get info :site-url))))

            (meta (@ (name "og:title")
                     (content ,(plist-get info :title))))
            (meta (@ (name "og:description")
                     (content ,(plist-get info :description))))
;;            (meta (@ (name "og:type")
;;                     (content ,(plist-get info :title))))
            (meta (@ (name "og:image")
                     (content ,(plist-get info :image))))
            (meta (@ (name "og:image:alt")
                     (content ,(plist-get info :image-alt))))
            (meta (@ (name "og:url")
                     (href ,(plist-get info :site-url))))

            (meta (@ (name "twitter:card")
                     (content "summary_large_image")))
            (meta (@ (name "twitter:site")
                     (content ,(concat "@" (plist-get info :socials-twitter)))))
            (meta (@ (name "twitter:creator")
                     (content ,(concat "@" (plist-get info :socials-twitter)))))
            (meta (@ (name "twitter:title")
                     (content ,(plist-get info :title))))
            (meta (@ (name "twitter:description")
                     (content ,(plist-get info :description))))
            (meta (@ (name "twitter:image")
                     (content ,(plist-get info :image))))
            (meta (@ (name "twitter:image:alt")
                     (content ,(plist-get info :image-alt))))

            (meta (@ (name "author")
                     (content ,(plist-get info :author))))
            (meta (@ (name "generator")
                     (content ,(plist-get info :creator)))))
           (body (div ,contents))))))


(defun  venikx.com--org-html-headline (contents info)
  )
#+end_src

** Custom HTML functions
#+begin_src emacs-lisp +n :results silent
(defun venikx-html-bold (bold contents info)
  "Transcode BOLD from Org to HTML.
CONTENTS is the text with bold markup.
INFO is a plist holding contextual information."
  (when contents (format "<strong>%s</strong>" contents)))

(defun ox-slimhtml-italic (italic contents info)
  "Transcode ITALIC from Org to HTML.
CONTENTS is the text with italic markup.
INFO is a plist holding contextual information."
  (when contents (format "<em>%s</em>" contents)))

(defun ox-slimhtml-verbatim (verbatim contents info)
  "Transcode VERBATIM string from Org to HTML.
CONTENTS is nil.
INFO is a plist holding contextual information."
  (let ((contents (org-html-encode-plain-text (org-element-property :value verbatim))))
    (when contents (format "<kbd>%s</kbd>" contents))))
#+end_src

** The custom backend
#+begin_src emacs-lisp +n :results silent
(org-export-define-backend 'venikx-html
 '((bold . venikx-html-bold)
   (template . venikx.com--org-html-template)
   )
 :options-alist
 '((:title "TITLE" nil nil t)
   (:description "DESCRIPTION" nil nil newline)
   (:author "AUTHOR" nil user-full-name)
   (:creator "CREATOR" nil org-export-creator-string)
   (:html-doctype "HTML_DOCTYPE" nil org-html-doctype)
   (:html-head-include-default-style nil nil nil)
   (:site-url nil nil "https://venikx.com" t)
   (:socials-twitter "SOCIALS_TWITTER" nil "_venikx" t)
   ))
#+end_src

** The custom function to use said backend
#+begin_src emacs-lisp +n :results silent
(defun org-venikx-html-publish-to-html (plist filename pub-dir)
  "Publish an org file to HTML.
FILENAME is the filename of the Org file to be published. PLIST is the property
list for the given project. PUB-DIR is the publishing directory. Return output
file name."
  (org-publish-org-to 'venikx-html filename
                      (concat "." (or (plist-get plist :html-extension)
                                      org-html-extension
                                      "html"))
                      (plist-put plist :this-file filename)
                      pub-dir))
#+end_src

** The project alist

#+begin_src emacs-lisp +n :results silent
(setq org-publish-project-alist
      (list
       (list "content"
             :base-extension "org"
             :recursive t
             :base-directory venikx.com--pages
             :publishing-function 'org-venikx-html-publish-to-html
             :publishing-directory (expand-file-name "public" venikx.com--root))
       (list "assets"
             :base-directory venikx.com--root
             :exclude (regexp-opt '("public/" "layouts/"))
             :base-extension venikx.com--site-attachments
             :publishing-directory (expand-file-name "public" venikx.com--root)
             :publishing-function 'org-publish-attachment
             :recursive t)
       (list "site" :components '("content" "assets"))))

(defun venikx.com--publish ()
  "Calling the script builds the venikx.com website."
  (interactive)
  (org-publish-all t))
#+end_src
