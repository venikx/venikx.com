#+title: Building Handmade Penguin on NixOS with Nix Flakes
#+description: Handmade Penguin is a Linux implementation of Handmade Hero, and my aim is to clarify how to bundle C/C++ and with external libraries on NixOS.
#+created: 2022-11-28T00:00:00Z

Lately, I'm following along [[https://handmadehero.org/][Handmade Hero]] on NixOS using SDL2 ([[https://davidgow.net/handmadepenguin/default.html][Handmade Penguin]]),
and wanted to setup [[https://zero-to-nix.com/concepts/flakes][nix flakes]] to build the derivation. I don't fully understand
building derivations with flakes yet, as nix provides a lot built-in wrappers.
But, I made something work for C/C++ with external dependencies such as SDL2.

If you are unfamiliar with the nix ecosystem, I recommend reading through [[https://nix.dev/tutorials/first-steps/][nix]]
and [[https://www.tweag.io/blog/2020-05-25-flakes/][nix flakes]], but it's not a requirement. Personally, I'm still learning about
these concepts myself.

A couple requirements (or opinions rather):
- use ~nix build~ to create the derivation, the output resides in the ~./result~
  folder
- place C++ source files in ~./src~
- your editor of choice (I use Emacs btw ðŸ˜Ž) linking SDL2 with the LSP, using a
  local development environment

* What the ~flake.nix~?
For my own [[https://github.com/venikx/dotfiles][system configuration]] I depend on =nixos-unstable=, but for projects I
like to depend on more stable version =nixos-23.05=. I need the =flake-utils=,
since it makes working with flakes easier when building derivations for multiple
platforms.

#+begin_src nix :exports code
{
  description = "Handmade Hero on NixOS";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }: {
    # so what goes in here?
  };
}
#+end_src

Let's create some variables we need later to create the derivation and setup the
development shell. The ~buildInputs~ are dependencies required by the runtime of
the program, while the ~nativeBuildInputs~ are the required dependencies to
build the program.

Personally, I use ~clangd~, but you can use whatever your LSP prefers. I also
use ~gf~, to provide me with a simple debugger as [[https://remedybg.itch.io/remedybg][RemedyBG]] is not available on
Linux [[https://github.com/x13pixels/remedybg-issues/issues/176#issuecomment-1555130327][yet]].

#+begin_src nix :exports code
outputs = { self, nixpkgs, flake-utils }:
  flake-utils.lib.eachDefaultSystem (system:
    let
      name = "my-handmade-hero";
      src = ./.;
      pkgs = nixpkgs.legacyPackages.${system};
      buildInputs = with pkgs; [ SDL2 SDL2.dev ];
      nativeBuildInputs = with pkgs; [ clang-tools gf ];
    in {
      # then what do we put here?
    });
#+end_src

To build the derivation we can depend on some helpers from the nix ecosystem. I
haven't figured out yet how to indicate to build a binary with debug symbols, as
the nix helpers seem to strip them out.

#+name: package
#+begin_src nix
packages.default = let inherit (pkgs) stdenv; in stdenv.mkDerivation {
  inherit system name src buildInputs nativeBuildInputs;

  buildPhase = with pkgs;
    "${clang}/bin/clang++ ./src/sdl_handmade.cpp -Wall -o handmade_hero -lSDL2";

  installPhase = ''
    mkdir -p $out/bin
    cp handmade_hero $out/bin/
  '';
};
#+end_src

The development environment loads the same ~buildInputs~ and
~nativeBuildInputs~, and as a sanity check reports the installed ~clang++~
version.

#+name: dev-shell
#+begin_src nix
devShells.default = pkgs.mkShell {
  inherit buildInputs nativeBuildInputs;

  shellHook = with pkgs; ''
    echo "`${clang}/bin/clang++ --version`"
  '';
};
#+end_src

Now, by bringing all these puzzles pieces together, you end up with the
following ~flake.nix~.

#+begin_src nix :tangle flake.nix :noweb yes
{
  description = "Handmade Hero on NixOS";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        name = "my-handmade-hero";
        src = ./.;
        pkgs = nixpkgs.legacyPackages.${system};
        buildInputs = with pkgs; [ SDL2 SDL2.dev ];
        nativeBuildInputs = with pkgs; [ clang-tools gf ];
      in {
        <<package>>
        <<dev-shell>>
      });
}
#+end_src

#+name: strip
#+begin_src elisp :var text="\e[31mHello World\e[0m" :exports none
(ansi-color-apply text)
#+end_src

Now, you can check if the flake is has been setup correctly.

#+name: nix-show
#+begin_src sh :results output :exports both :post strip(*this*)
nix flake show
#+end_src

#+RESULTS: nix-show
#+begin_example
git+file:///home/venikx/code/venikx.com?dir=src/content/blog/handmade-hero-nixos
â”œâ”€â”€â”€devShells
â”‚   â”œâ”€â”€â”€aarch64-darwin
â”‚   â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
â”‚   â”œâ”€â”€â”€aarch64-linux
â”‚   â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
â”‚   â”œâ”€â”€â”€x86_64-darwin
â”‚   â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
â”‚   â””â”€â”€â”€x86_64-linux
â”‚       â””â”€â”€â”€default: development environment 'nix-shell'
â””â”€â”€â”€packages
    â”œâ”€â”€â”€aarch64-darwin
    â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
    â”œâ”€â”€â”€aarch64-linux
    â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
    â”œâ”€â”€â”€x86_64-darwin
    â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
    â””â”€â”€â”€x86_64-linux
        â””â”€â”€â”€default: package 'my-handmade-hero'
#+end_example

* Verify the SDL2 headers with a Message Box
The simplest way to check if a C/C++ codebase properly connects with SDL2 is
showing a [[https://wiki.libsdl.org/SDL2/SDL_ShowSimpleMessageBox][message box]]. Your editor (I use Emacs btw ðŸ˜Ž) should now also be able
to complete SDL functions when you type =SDL_=.

#+begin_src C++ :mkdirp yes :tangle src/sdl_handmade.cpp
#include <SDL2/SDL.h>
#include <stdio.h>

int main(int arc, char **argv) {
  SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_INFORMATION, "Handmade Hero",
                           "This is Handmade Hero", 0);
  return 0;
}
#+end_src

The hardest parts are behind us now. Running ~nix build~ creates an executable
file.

#+begin_src sh :results none :exports code
nix build
#+end_src

After running the ~handmade_hero~ executable from the ~./result/bin/~ folder, you should see a message box.

#+begin_src sh :results none :exports code
./result/bin/handmade_hero
#+end_src

#+caption: test
[[file:./buffer.png]]

Grrrr... Inline images aren't working when using Astro and org-mode, [[https://github.com/venikx/venikx.com/issues/6][sigh]].
