#+title: Building Handmade Hero with Nix Flakes
#+description: Handmade Penguin is a Linux implementation of Handmade Hero, and my aim is to clarify how to bundle C/C++ with external libraries using Nix Flakes.
#+created: [2023-11-28 Tue]
#+modified: [2024-04-19 Fri 13:23]
#+filetags: :nix:cpp:

Lately, I'm following along [[https://handmadehero.org/][Handmade Hero]] on NixOS using SDL2 (thank you
[[https://davidgow.net/handmadepenguin/default.html][Handmade Penguin]]), and wanted to setup [[https://zero-to-nix.com/concepts/flakes][=Nix Flakes=]] to build the derivation. I
made something work for ~C/C++~ with external dependencies such as ~SDL2~.

If you are unfamiliar with the nix ecosystem, I recommend reading my [[../how-to-nix/index.org][How-To Nix]]
guide, but it's not a requirement. I'm still learning about these concepts
myself, so don't worry.

My requirements:
- ability to use ~nix run~ to display the project (via NixOS, or Nix on it's
  own)
- place C++ source files in ~./src~
- the =Language Server Protocol= (LSP) should pick up the ~SDL2~ library when
  using [[https://direnv.net/][direnv]] in your editor of choice (I use Emacs btw ðŸ˜Ž)

* Show the ~flake.nix~ already!
For my own [[https://github.com/venikx/dotfiles][system configuration]] I depend on =nixos-unstable=, but for projects I
like to depend on more stable version =nixos-23.05=. I need the =flake-utils=,
since it makes working with flakes easier when building derivations for multiple
platforms.

#+begin_src nix
{
  description = "Handmade Hero on NixOS";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let pkgs = nixpkgs.legacyPackages.${system};
      in {
        # TODO(Kevin): What goes in here?
      });
}
#+end_src

I use ~clangd~, not sure why, but it's the one I chose. If you want to use
~gcc~, go for it. I also use ~gf~ to provide me with a simple debugger as
[[https://remedybg.itch.io/remedybg][RemedyBG]] is not available on Linux [[https://github.com/x13pixels/remedybg-issues/issues/176#issuecomment-1555130327][yet]].

The executable depends on ~SDL2~ being available at runtime, which is why we add
it to the ~buildInputs~. Usually you would read ~mkDerivation~, but this
environment provides ~gcc~ by default, not ~clang++~. We have to call the
derivation helper from a ~clangStenv~.

#+name: packages
#+begin_src nix
packages = {
  default = let inherit (pkgs) clangStdenv;
  in clangStdenv.mkDerivation {
    name = "my-handmade-hero";
    src = ./.;
    buildInputs = with pkgs; [ SDL2 ];

    buildPhase = with pkgs;
      "clang++ ./src/sdl_handmade.cpp -o handmade_hero -lSDL2";

    installPhase = ''
      mkdir -p $out/bin
      cp handmade_hero $out/bin/my-handmade-hero
    '';
  };
};
#+end_src

The reproducible development environment loads the same ~buildInputs~ and
~nativeBuildInputs~, from the earlier mention package declaration via
~inputsFrom~. The shell reports the installed ~clang++~ version as a sanity
check.

#+name: dev-shell
#+begin_src nix
devShells = {
  default = pkgs.mkShell.override { stdenv = pkgs.clangStdenv; } {
    packages = with pkgs; [ clang-tools gf SDL2.dev ];

    inputsFrom = [ self.packages.${system}.default ];

    shellHook = with pkgs; ''
      echo "`clang++ --version`"
    '';
  };
};
#+end_src

Now, by bringing all these puzzles pieces together, you end up with the
following ~flake.nix~.

#+begin_src nix :tangle flake.nix :noweb yes
{
  description = "Handmade Hero on NixOS";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-23.05";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        name = "my-handmade-hero";
        src = ./.;
        pkgs = nixpkgs.legacyPackages.${system};
        buildInputs = with pkgs; [ SDL2 SDL2.dev ];
        nativeBuildInputs = with pkgs; [ clang-tools gf ];
      in {
        <<package>>
        <<dev-shell>>
      });
}
#+end_src

#+name: strip
#+begin_src lisp :var text="\e[31mHello World\e[0m" :exports none
(ansi-color-apply text)
#+end_src

Generate the lock file, and check if the flake is has been setup correctly.
#+name: nix-show
#+begin_src sh :results output :post strip(*this*)
nix flake lock
nix flake show
#+end_src

#+RESULTS: nix-show
#+begin_example
git+file:///home/venikx/code/venikx.com?dir=src/content/blog/handmade-hero-nixos
â”œâ”€â”€â”€devShells
â”‚   â”œâ”€â”€â”€aarch64-darwin
â”‚   â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
â”‚   â”œâ”€â”€â”€aarch64-linux
â”‚   â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
â”‚   â”œâ”€â”€â”€x86_64-darwin
â”‚   â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
â”‚   â””â”€â”€â”€x86_64-linux
â”‚       â””â”€â”€â”€default: development environment 'nix-shell'
â””â”€â”€â”€packages
    â”œâ”€â”€â”€aarch64-darwin
    â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
    â”œâ”€â”€â”€aarch64-linux
    â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
    â”œâ”€â”€â”€x86_64-darwin
    â”‚   â””â”€â”€â”€default omitted (use '--all-systems' to show)
    â””â”€â”€â”€x86_64-linux
        â””â”€â”€â”€default: package 'my-handmade-hero'
#+end_example

* Verify the SDL2 Headers with a Message Box
The simplest way to check if C/C++ code properly links with the ~SDL2~ library
is by showing a [[https://wiki.libsdl.org/SDL2/SDL_ShowSimpleMessageBox][message box]]. Your editor (I use Emacs btw ðŸ˜Ž) should now also be
able to complete SDL functions when you type =SDL_=.

#+caption: Finally! Some C++ code!
#+begin_src cpp :mkdirp yes :tangle src/sdl_handmade.cpp
#include <SDL2/SDL.h>
#include <stdio.h>

int main(int arc, char **argv) {
  SDL_ShowSimpleMessageBox(SDL_MESSAGEBOX_INFORMATION, "Handmade Hero",
                           "This is Handmade Hero", 0);
  return 0;
}
#+end_src

The hardest parts are behind us now. Running ~nix build~ creates an executable
file inside =result=. After running =./result/bin/handmade_hero= you should see
a message box. Or equivalently run ~nix run~.

#+begin_src sh :exports code :eval no
nix run
#+end_src

#+caption: A ~SimpleMessageBox~ appears with the text "This is Handmade Hero"
[[./buffer.png]]
