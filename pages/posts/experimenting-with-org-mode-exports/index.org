#+title: Experimenting with OrgMode to HTML5 exporter
#+date: [2021-04-24 Sat 01:07]
#+description: The blog post is living documentation regarding the exporting features I'm testing out with org-mode.
#+keywords: emacs org-mode html5
#+category: emacs

#+macro: created {{{date(%e %B %Y)}}}
#+macro: modified {{{modification-time(%e %B %Y)}}}
#+options: toc:nil html5-fancy:t
#+language: en

* Embedding different kind of HTML5 snippets
** HTML5 itself
#+BEGIN_aside
  Lorem ipsum
#+END_aside

** HTML5 Elements
#+begin_src org
#+BEGIN_EXPORT html
  <p>All lines between these markers are exported <strong>literally.</strong></p>
#+END_EXPORT
#+end_src
#+BEGIN_EXPORT html
  <p>All lines between these markers are exported <strong>literally.</strong></p>
#+END_EXPORT
** YouTube iframes
#+CAPTION: An example of a working YouTube video embedded from org-mode
#+begin_export html
<iframe src="https://www.youtube-nocookie.com/embed/v_jDFgS2AqE" allowfullscreen title="YouTube Video"></iframe>
#+end_export
* Images
#+CAPTION: A panoramic view of Helsinki
[[file:../../assets/helsinki.jpg]]

* Generate snippets during the HTML5 export
The REPL based languages usually support session arguments which allows for
chaining code blocks to each other.

** Shell
Let's create a variable
#+BEGIN_SRC sh :session session-shell-chain :results silent
MY_NAME="Kevin Rangel"
#+END_SRC

And let's print it's value
#+BEGIN_SRC sh :session session-shell-chain :results ouput :exports both
echo $MY_NAME
#+END_SRC

#+NAME: testing
#+CAPTION: These are the results of the above running script
#+RESULTS:
: Kevin Rangel
** Lisp
Sometimes you want preformat some output of a code block. The ~:post~ makes sure
that another code block is executed right before displaying the results.

#+BEGIN_SRC emacs-lisp :results value table :exports both :post add-header(*this*)
  (mapcar (lambda (i)
           (list i (+ (random 4) (- i 2))))
          (number-sequence 1 20))
#+END_SRC

#+NAME: est-truth-data
#+CAPTION: Truth and Estimate
#+RESULTS:
|-------+----------|
| Truth | Estimate |
|-------+----------|
|     1 |        2 |
|     2 |        3 |
|     3 |        3 |
|     4 |        2 |
|     5 |        5 |
|     6 |        4 |
|     7 |        7 |
|     8 |        7 |
|     9 |        7 |
|    10 |       10 |
|    11 |        9 |
|    12 |       12 |
|    13 |       12 |
|    14 |       13 |
|    15 |       14 |
|    16 |       16 |
|    17 |       18 |
|    18 |       16 |
|    19 |       20 |
|    20 |       19 |

In order to get the table of data more comprehensive we utilize another block to
post process the result. This block adds a header to the table.
#+name: add-header
#+begin_src emacs-lisp :var tbl=""
(cons 'hline (cons '("Truth" "Estimate") (cons 'hline tbl)))
#+end_src

** Javascript
#+name: hello-from-js
#+begin_src emacs-lisp
function Hello(name) {
    console.log("Hello " + name)
}
#+end_src

#+begin_src js :results output :noweb yes :exports both
<<hello-from-js>>
Hello("Kevin")
#+end_src

#+RESULTS:
: Hello Kevin

* Macros
#+begin_src org
#+macro: created {{{date(%e %B %Y)}}}
#+macro: modified {{{modification-time(%e %B %Y)}}}

The published date is {{{date(%e %B %Y)}}} while the modified date is
{{{modification-time(%e %B %Y)}}}.
#+end_src


The published date is {{{date(%e %B %Y)}}} while the modified date is
{{{modification-time(%e %B %Y)}}}.
